---
import { getNavLinks } from '../data/content';

const navLinks = await getNavLinks();
---
<nav class="nav-shell" aria-label="主导航" data-nav>
  <div class="nav-inner">
    <a class="nav-brand" href="#top">
      <span class="brand-mark">SCA</span>
      <span class="brand-text">学校电脑协会</span>
    </a>
    <div class="nav-links" role="list">
      {navLinks.map((link) => (
        <a href={link.href} class="nav-link" data-nav-link>
          <span>{link.label}</span>
        </a>
      ))}
    </div>
  </div>
</nav>

<script type="module">
  const nav = document.querySelector('[data-nav]');
  const links = nav ? Array.from(nav.querySelectorAll('[data-nav-link]')) : [];
  if (links.length > 0) {
    // 只为第一个#开头的锚点链接设置激活状态
    const firstAnchorLink = links.find(link => link.getAttribute('href').startsWith('#'));
    if (firstAnchorLink) {
      firstAnchorLink.setAttribute('data-active', '');
    }
  }

  const targets = links
    .map((link) => {
      const href = link.getAttribute('href');
      // 只处理#开头的锚点链接，忽略/gallery/和/blog/等外部链接
      if (href.startsWith('#')) {
        return document.querySelector(href);
      }
      return null;
    })
    .filter(Boolean);

  if ('IntersectionObserver' in window) {
    const observer = new IntersectionObserver(
      (entries) => {
        const visible = entries
          .filter((entry) => entry.isIntersecting)
          .sort((a, b) => a.boundingClientRect.top - b.boundingClientRect.top);
        if (visible.length > 0) {
          const activeId = `#${visible[0].target.id}`;
          links.forEach((link) => {
            const href = link.getAttribute('href');
            // 只处理#开头的锚点链接，忽略/gallery/和/blog/等外部链接
            if (href.startsWith('#')) {
              const isActive = href === activeId;
              link.toggleAttribute('data-active', isActive);
            }
          });
        }
      },
      { threshold: 0.4 }
    );

    targets.forEach((section) => observer.observe(section));
  }
</script>

<style>
  .nav-shell {
    display: flex;
    justify-content: center;
    padding: clamp(12px, 3vw, 18px) clamp(20px, 6vw, 80px);
    pointer-events: none;
  }

  .nav-inner {
    pointer-events: auto;
    width: var(--page-max-width);
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 24px;
    border: 1px solid var(--border-hairline);
    background: rgba(255, 255, 255, 0.88);
    backdrop-filter: blur(18px);
    border-radius: 999px;
    padding: 14px clamp(18px, 3vw, 28px);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.06);
  }

  .nav-brand {
    display: inline-flex;
    align-items: center;
    gap: 10px;
    font-size: 0.95rem;
    font-weight: 600;
    letter-spacing: 0.12em;
    text-transform: uppercase;
  }

  .brand-mark {
    display: grid;
    place-items: center;
    width: 34px;
    height: 34px;
    border-radius: 50%;
    border: 1px solid var(--border-strong);
    font-size: 0.8rem;
    letter-spacing: normal;
  }

  .nav-links {
    display: flex;
    align-items: center;
    gap: 10px;
    overflow-x: auto;
    scrollbar-width: none;
  }

  .nav-links::-webkit-scrollbar {
    display: none;
  }

  .nav-link {
    position: relative;
    padding: 8px 16px;
    border-radius: 999px;
    border: 1px solid transparent;
    font-size: 0.85rem;
    letter-spacing: 0.04em;
    transition: color 220ms var(--transition-soft), border-color 220ms var(--transition-soft), background 220ms var(--transition-soft);
  }

  .nav-link:hover,
  .nav-link:focus-visible {
    border-color: rgba(18, 18, 18, 0.12);
    background: rgba(255, 255, 255, 0.7);
  }

  .nav-link[data-active] {
    border-color: rgba(18, 18, 18, 0.16);
    background: rgba(18, 18, 18, 0.04);
  }

  @media (max-width: 768px) {
    .nav-inner {
      gap: 16px;
      padding: 12px 16px;
    }

    .brand-text {
      display: none;
    }

    .nav-link {
      padding: 8px 12px;
    }
  }
</style>
