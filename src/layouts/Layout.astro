---
import '../styles/global.css';

export interface Props {
  title?: string;
  description?: string;
}

const {
  title = '学校电脑协会',
  description = '以苹果官网的极简高质风格打造的学校电脑协会官网。'
} = Astro.props;
---
<!doctype html>
<html lang="zh-Hans">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
  </head>
  <body data-page-ready>
    <div class="reading-progress" id="reading-progress"></div>
    <div class="page-shell">
      <slot />
    </div>
    <button type="button" class="to-top" id="to-top" aria-label="返回顶部">
      <span>Top</span>
    </button>
    <script type="module">
      const progressBar = document.getElementById('reading-progress');
      const toTopBtn = document.getElementById('to-top');
      const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

      const clamp = (value, min, max) => Math.min(Math.max(value, min), max);

      const handleScroll = () => {
        const { scrollTop, scrollHeight, clientHeight } = document.documentElement;
        const progress = clamp((scrollTop / Math.max(scrollHeight - clientHeight, 1)) * 100, 0, 100);
        if (progressBar) {
          progressBar.style.setProperty('--progress', `${progress}`);
          progressBar.style.transform = `scaleX(${progress / 100})`;
        }
        if (toTopBtn) {
          toTopBtn.toggleAttribute('data-visible', scrollTop > clientHeight * 0.5);
        }
      };

      const initReveal = () => {
        const revealItems = document.querySelectorAll('[data-reveal]');
        if (!('IntersectionObserver' in window)) {
          revealItems.forEach((item) => item.classList.add('is-visible'));
          return;
        }
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                entry.target.classList.add('is-visible');
                observer.unobserve(entry.target);
              }
            });
          },
          {
            threshold: 0.2,
            rootMargin: '0px 0px -10% 0px'
          }
        );
        revealItems.forEach((item) => observer.observe(item));
      };

      document.addEventListener('scroll', handleScroll, { passive: true });
      handleScroll();

      window.addEventListener('DOMContentLoaded', initReveal, { once: true });

      toTopBtn?.addEventListener('click', () => {
        window.scrollTo({ top: 0, behavior: prefersReducedMotion ? 'auto' : 'smooth' });
      });
    </script>
  </body>
</html>
